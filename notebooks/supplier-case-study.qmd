---
title: "Data Science Case Study"
subtitle: "Supplier Audit Results Prediction"
author: "Maximilian Muecke"
date: 2022-12-09
format: revealjs
---

## Overview

- BMW has selected suppliers that must pass an auditing process
- The audit process has three stages T1, T2, and T3 and the result corresponds 
to the most recent result
  - Green indicates that the supplier is qualified
  - Yellow means that they receive warnings
  - Red means that the suppliers are disqualified
- Goal: predict the audit result and give the audit experts potential indicators

## Data

- Audit History: Dataset of supplier audit histories
  - Monthly panel data set with 10 columns (2022-02-01 -- 2022-10-01)
  - SupplierId, RecentMonth, RecentTimeStamp, DerivativeName, DerivativeRegion, 
    ProductionLine, T1Color, T2Color, T3Color, Result
- Supplier Performance KPIs: Dataset for key supplier performance indicators
  - Cross sectional data with 5 columns
  - SupplierId, Amount_WD_3M, Amount_Backlogs_3M, 12_Month_LPKM, BadSupplierIndicator
- Datasets can be joined by the supplier id

```{r}
#| label: import-clean-data
#| include: false
library(dplyr)
library(ggplot2)

import_data <- function(path) {
  audit_history <- readr::read_csv(
    file = paste0(path, "AuditHistory.csv"),
    show_col_types = FALSE
  )
  supplier_performance <- readr::read_csv(
    file = paste0(path, "SupplierPerformance.csv"),
    show_col_types = FALSE
  )
  audit_history <- audit_history %>%
    inner_join(supplier_performance, by = "SupplierId")
  clean_names <- janitor::make_clean_names(names(audit_history))
  clean_names[[17]] <- "lpkm_12m"
  setNames(audit_history, clean_names)
}

clean_cols <- function(df) {
  df %>%
    mutate(
      recent_month = lubridate::ym(recent_month),
      supplier_id = as.factor(supplier_id),
      bad_supplier_indicator = ifelse(is.na(bad_supplier_indicator), 0, 1),
      across(t1color:t3color, ~ ifelse (.x == "-", NA, .x)),
      across(where(is.character), as.factor)
    ) %>% 
    distinct()
}

supplier <- import_data("../Data/") %>% 
  clean_cols()
```

## Data: recent month

```{r}
skimr::skim(supplier, recent_month) %>% 
  select(
    `Min date` = Date.min, `Max date` = Date.max, `No. dates` = Date.n_unique,
    `No. missing` = n_missing, `Complete rate` = complete_rate
  ) %>% 
  knitr::kable()
```

## Data: panel data

```{r}
skimr::skim(
  supplier, supplier_id, derivative_name, derivative_region, production_line,
  t1color, t2color, t3color, result
) %>% 
  select(
    `Variable` = skim_variable, `No. unique` = factor.n_unique,
    `No. missing` = n_missing, `Complete rate` = complete_rate
    ) %>% 
  knitr::kable(digits = 2)
```

## Data: cross sectional

```{r}
skimr::skim(
  supplier, amount_wd_3m, amount_wd_6m, amount_wd_12m,
  amount_backlogs_3m, amount_backlogs_6m,amount_backlogs_12m,
  lpkm_12m, bad_supplier_indicator
) %>% 
  select(
    `Variable` = skim_variable, `No. Missing` = n_missing, `Complete Rate` = complete_rate,
    `Mean` = numeric.mean
  ) %>% 
  knitr::kable(digits = 2)
```

## Date range

```{r}
date_max <- max(supplier$recent_month)
date_min <- min(supplier$recent_month)
missing_date_range <- supplier %>%
  group_by(supplier_id) %>%
  summarise(date_min = min(recent_month), date_max = max(recent_month)) %>%
  filter(date_min != !!date_min | date_max != !!date_max)
missing_date_range %>% 
  head(3) %>% 
  knitr::kable()
```

- There are `r nrow(missing_date_range)` of `r nrow(supplier)` observations not in the date range of `r date_min` and `r date_max`. 
- Needs to be consider for models that require same panel size.

## Missing region

```{r}
#| label: missing-region
supplier %>% 
  group_by(recent_month, supplier_id) %>% 
  filter(is.na(derivative_region)) %>% 
  ungroup() %>% 
  select(derivative_name) %>% 
  distinct() %>%
  knitr::kable()
```

- Three derivatives have missing regions

## Missing lpkm_12m

```{r}
#| label: missing-lpkm_12m
missing_lpkm <- supplier %>% 
  filter(is.na(lpkm_12m)) %>% 
  select(supplier_id) %>% 
  distinct()

all_lpkm_missing <- vapply(pull(missing_lpkm), function(x) {
  supplier %>% 
    filter(supplier_id == !!x) %>% 
    pull(lpkm_12m) %>% 
    is.na() %>% 
    all()
}, logical(1)) %>% 
  all() %>% 
  knitr::kable()
```

- 6 suppliers have missing `lpkm_12m` values.
- Every supplier that has missing `lpkm_12m` values, has all of them missing.
- Imputing with mean.

## Assocation Matrix with Cramer's V score

```{r}
#| lable: cramerv-plot
supplier_sub <- supplier %>% select(-c(t1color, t2color, t3color))
corrplot::corrplot(DescTools::PairApply(supplier_sub, DescTools::CramerV))
```

## Result variable

```{r}
#| warning: false
result_summary <- summary(supplier$result)
green_perc <- result_summary["Green"] / sum(result_summary)

supplier %>%
  ggplot(aes(result)) +
    geom_histogram(stat = "count", fill = c("darkgreen", "darkred", "yellow")) +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5)) +
    labs(
      title = "Distribution supplier audit results across all suppliers",
      x = "Supplier Audit Result",
      y = "Count"
    )
```

- Highly imbalanced with `r round(green_perc * 100, 2)`% being green
- Indicates that the suppliers are qualified in the current audit process with a much higher degree

## Result vs. derivative region

```{r}
ggplot(supplier) +
  geom_bar(aes(x = result, fill = derivative_region)) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(
    title = "Distribution supplier audit results across regions",
    x = "Supplier Audit Result",
    y = "Count",
    fill = "Derivative Region"
  )
```

## Result vs. derivative region

```{r}
#| fig-width: 15
#| fig-height: 10
vcd::mosaic(
  result ~ derivative_region,
  data = supplier,
  main = "Results vs. Region",
  labeling = vcd::labeling_border(rot_labels = c(45, 45), varnames = FALSE)
)
```

## Seasonal effects

```{r}
supplier %>%
  group_by(recent_month, result) %>%
  tally() %>%
  ggplot() +
  geom_line(aes(y = n, x = recent_month, color = result)) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(
     title = "Supplier audit results across time",
     x = "Month",
     y = "Count",
     color = "Supplier Audit Result"
   )
```

## Seasonal effects

```{r}
supplier %>%
  group_by(recent_month, derivative_region, result) %>%
  tally() %>%
  ggplot() +
  geom_line(aes(y = n, x = recent_month, color = derivative_region)) +
  facet_wrap(~ result) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(
    title = "Supplier audit results across time and derivative regions",
    x = "Month",
    y = "Count",
    color = "Derivative Region"
  )
```

## Seasonal effects

```{r}
supplier %>%
  group_by(recent_month, production_line, result) %>%
  tally() %>%
  ggplot() +
  geom_line(aes(y = n, x = recent_month, color = production_line)) +
  facet_wrap(~ result) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(
    title = "Supplier audit results across time and derivative regions",
    x = "Month",
    y = "Count",
    color = "Production Line"
  )
```

## Prediction Model

- Time series classification problem
- Goal: get the audit result for the next month (1-step-ahed forecast)
- Machine learning model: LightGBM
  - Explainable
  - Proven track record for time series (M3, M4 competitions etc.)
  - Automatically deals with missing values

```{r}
#| label: feature-engineering

add_date_feat <- function(df) {
  # year has no information gain since data is strictly 2022
  df %>%   
    mutate(
      month = lubridate::month(recent_month),
      quarter = lubridate::quarter(recent_month)
    )
}

add_interaction <- function(df) {
  df %>% 
    mutate(
      region_production = as.factor(paste0(derivative_region, production_line))
    )
}

add_count <- function(df) {
  region_count <- df %>% 
    select(supplier_id, derivative_region) %>% 
    distinct() %>% 
    group_by(supplier_id) %>% 
    count() %>% 
    rename(region_count = n)
  name_count <- df %>% 
    select(supplier_id, derivative_name) %>% 
    distinct() %>% 
    group_by(supplier_id) %>% 
    count() %>% 
    rename(name_count = n)
  production_count <- df %>% 
    select(supplier_id, production_line) %>% 
    distinct() %>% 
    group_by(supplier_id) %>% 
    count() %>% 
    rename(production_count = n)
  
  df %>% 
    inner_join(region_count, by = "supplier_id") %>% 
    inner_join(name_count, by = "supplier_id") %>% 
    inner_join(production_count, by = "supplier_id")
}

apply_lags <- function(df, lag = 1) {
  # the rest is cross-sectional data, hence static across time
  df %>%
    group_by(supplier_id, derivative_name) %>% 
    mutate(
      lag_1_result = lag(result, n = 1, order_by = recent_month),
      lag_2_result = lag(result, n = 2, order_by = recent_month),
      lag_3_result = lag(result, n = 3, order_by = recent_month),
    ) %>% 
    ungroup() %>% 
    tidyr::drop_na()
}

drop_cols <- function(df) {
  df %>% 
    select(-c(t1color, t2color, t3color, recent_time_stamp))
}

remove_missing_date <- function(df) {
  date_max <- max(df$recent_month)
  missing <- df %>%
    group_by(supplier_id) %>%
    summarise(date_max = max(recent_month)) %>%
    filter(date_max != !!date_max)
  df %>%
    anti_join(missing, by = "supplier_id")
}

impute_missing <- function(df) {
  df %>% 
    group_by(recent_month) %>% 
    mutate(lpkm_12m = ifelse(!is.na(lpkm_12m), lpkm_12m, mean(lpkm_12m))) %>% 
    ungroup()
}

add_static_reals <- function(df) {
  df %>% 
    group_by(derivative_region) %>% 
    mutate(avg_region_rating = mean(lpkm_12m, na.rm = TRUE)) %>%
    ungroup()
}
```

```{r}
#| label: train-test-data
supplier <- import_data("../Data/") %>%
  clean_cols() %>% 
  impute_missing() %>% 
  remove_missing_date() %>% 
  drop_cols() %>%
  add_date_feat() %>%
  add_interaction() %>% 
  add_count() %>% 
  apply_lags() %>% 
  ungroup()
  
train_data <- supplier %>%
  filter(recent_month < "2022-10-01") %>% 
  select(-recent_month)

test_data <- supplier %>%
  filter(recent_month >= "2022-10-01") %>% 
  select(-recent_month)
```

```{r}
#| label: train-model 
library(lightgbm)
library(mlr3)
library(mlr3extralearners)

task_train <- as_task_classif(train_data, target = "result", id = "supplier_id")
task_test <- as_task_classif(test_data, target = "result", id = "supplier_id")
task <- supplier %>% 
  select(-recent_month) %>% 
  as_task_classif(target = "result", id = "supplier_id")

learner <- lrn("classif.lightgbm")
learner$train(task_train)
prediction <- learner$predict(task_test)
```

## 10 most important features

```{r}
#| label: lgbm-feat-importance
learner$importance() %>% 
  tibble::enframe(name = "feature", value = "importance") %>% 
  dplyr::slice(1:10) %>% 
  knitr::kable(digits = 3)
```

## Evaluation

### Out-of-sample for most recent month on supplier, derivative level

```{r}
#| label: confusion-matrix
prediction$confusion %>% 
  knitr::kable(caption = "Confusion Matrix")
```

## Evaluation 

### Out-of-sample for most recent month on supplier, derivative level

```{r}
#| label: out-of-sample-acc
measures <- msrs(c("classif.acc", "classif.ce"))
prediction$score(measures) %>% 
  setNames(c("Accuracy", "Classifcation Error")) %>% 
  tibble::enframe(name = "metric", value = "value") %>% 
  mutate(value = sprintf("%.2f%%", value * 100)) %>% 
  knitr::kable()
```

## Evaluation

### Out-of-sample for most recent month on supplier, derivative level

```{r}
#| label: accuracy-plot
#| warning: false
library(mlr3viz)

autoplot(prediction)
```

```{r}
split <- lapply(10:8, function(end_month) {
  train <- task$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
  test <- task$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
  list(train = train, test = test)
}) 

resampling <- rsmp("custom")
resampling$instantiate(task,
  train = lapply(split, function(x) x$train),
  test = lapply(split, function(x) x$test)
)
rr <- resample(task, learner, resampling, store_models = TRUE)
```

## 3-Fold Rolling window cross validation

```{r}
#| include: false
split <- lapply(10:8, function(end_month) {
  train <- task$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
  test <- task$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
  list(train = train, test = test)
}) 

resampling <- rsmp("custom")
resampling$instantiate(task,
  train = lapply(split, function(x) x$train),
  test = lapply(split, function(x) x$test)
)
rr <- resample(task, learner, resampling, store_models = TRUE)
```

```{r}
measures <- msrs(c("classif.acc", "classif.ce"))
rr$aggregate(msrs(c("classif.acc", "classif.ce"))) %>%
  setNames(c("Accuracy", "Classifcation Error")) %>% 
  tibble::enframe(name = "metric", value = "value") %>% 
  mutate(value = sprintf("%.2f%%", value * 100)) %>% 
  knitr::kable()
```

```{r}
#| label: para-tuning
#| eval: false
library(mlr3tuning)

learner <- lrn("classif.lightgbm",
  num_iterations = to_tune(1, 5000),
  max_depth = to_tune(1, 20),
  lambda_l1 = to_tune(1e-3, 1e3, logscale = TRUE)
)

split <- lapply(9, function(end_month) {
  train <- task$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
  test <- task$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
  list(train = train, test = test)
}) 

resampling <- rsmp("custom")
resampling$instantiate(task,
  train = lapply(split, function(x) x$train),
  test = lapply(split, function(x) x$test)
)

instance <- tune(
  method = tnr("random_search"),
  task = task,
  learner = learner,
  resampling = resampling,
  measure = msr("classif.ce"),
  terminator = trm("evals", n_evals = 5)
)

learner$param_set$values <- instance$result_learner_param_vals
learner$train(task_train)
prediction <- learner$predict(task_test)

prediction$score(measures) %>% 
  setNames(c("Accuracy", "Classifcation Error")) %>% 
  tibble::enframe(name = "metric", value = "value") %>% 
  mutate(value = sprintf("%.2f%%", value * 100)) %>% 
  knitr::kable()
```

## Nested Resampling

```{r}
learner <- lrn("classif.lightgbm",
  num_iterations = to_tune(1, 5000),
  max_depth = to_tune(1, 20),
  lambda_l1 = to_tune(1e-3, 1e3, logscale = TRUE)
)

inner_split <- lapply(7:5, function(end_month) {
  train <- task$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
  test <- task$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
  list(train = train, test = test)
}) 

inner_resampling <- rsmp("custom")
inner_resampling$instantiate(task,
  train = lapply(inner_split, function(x) x$train),
  test = lapply(inner_split, function(x) x$test)
)

at = auto_tuner(
  method = tnr("random_search"),
  learner = learner,
  resampling = inner_resampling,
  measure = msr("classif.ce"),
  term_evals = 5,
)

outer_split <- lapply(10:8, function(end_month) {
  train <- task$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
  test <- task$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
  list(train = train, test = test)
}) 

outer_resampling <- rsmp("custom")
outer_resampling$instantiate(task,
  train = lapply(outer_split, function(x) x$train),
  test = lapply(outer_split, function(x) x$test)
)
rr = resample(task, at, outer_resampling, store_models = TRUE)
rr$aggregate()
```

## Custom Resampling

```{r}
learner <- lrn("classif.lightgbm",
  num_iterations = to_tune(1, 5000),
  max_depth = to_tune(1, 20),
  lambda_l1 = to_tune(1e-3, 1e3, logscale = TRUE)
)

create_task <- function(supplier, end_month) {
  supplier <- setDT(supplier)
  supplier <- supplier[order(-recent_month), !c("recent_month")]
  train <- supplier[month <= end_month, ]
  test <- supplier[month == end_month, ]
  train_task <- as_task_classif(train, target = "result", id = "supplier_id")
  test_task <- as_task_classif(test, target = "result", id = "supplier_id")
  list(train = train_task, test = test_task)
}

tasks <- lapply(10:8, function(end_month) create_task(supplier, end_month))
names(tasks) <- 10:8
score <- lapply(names(tasks), function(m) {
  task_train <- tasks[[m]][["train"]]
  task_test <- tasks[[m]][["test"]]
  m <- as.integer(m)
  m <- m - 1
  
  split <- lapply(seq(m, m - 1), function(end_month) {
    train <- task_train$data()[, `:=`(id = 1:.N)][month < end_month, .(id)]$id
    test <- task_train$data()[, `:=`(id = 1:.N)][month == end_month, .(id)]$id
    list(train = train, test = test)
  }) 
  
  resampling <- rsmp("custom")
  resampling$instantiate(task_train,
    train = lapply(split, function(x) x$train),
    test = lapply(split, function(x) x$test)
  )
  
  at <- auto_tuner(
    method = tnr("random_search"),
    learner = learner,
    resampling = resampling,
    measure = msr("classif.ce"),
    term_evals = 5,
  )
  at$train(task_train)
  at$predict(task_test)$score()
})
```

## Model explaination with DALEX

```{r}
#| include: false
library("DALEX")
library("DALEXtra")

lgbm_exp <- explain_mlr3(learner,
  data = supplier %>% select(-recent_month),
  y = as.integer(supplier$result),
  label = "LGBM",
  colorize = TRUE 
)
supplier_vi <- model_parts(lgbm_exp)
```

```{r}
#| warning: false
plot(supplier_vi, max_vars = 12, show_boxplots = TRUE)
```

## Model explaination with DALEX

```{r}
#| warning: false
selected_variables <- c(
  "lag_1_result", "month", "quarter", "derivative_region", "production_line"
)
supplier_pd <- model_profile(lgbm_exp, variables = selected_variables)$agr_profiles

plot(supplier_pd) +
  ggtitle("Partial Dependence profiles for selected variables")
```
